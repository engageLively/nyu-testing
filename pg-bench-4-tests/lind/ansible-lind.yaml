- hosts: a1,b1
  strategy: free
  become: true
  vars:
    run_initial_setup: false  # Toggle this to false to skip the initial setup block

  tasks:
    - block:
        - name: Check machines
          shell: |
            echo "CPUs: $(nproc)"
            echo "Memory: $(free -g | awk '/^Mem:/{print $7}') GB"
          register: machinecheck

        - debug: msg="{{ machinecheck.stdout }}"
        
        - debug: msg="{{ machinecheck.stderr }}"

        - name: Copy install docker script
          copy:
            src: /project/mhemmings/notebooks/get-docker.sh
            dest: /tmp/get-docker.sh        

        - name: Run install docker script
          shell: bash /tmp/get-docker.sh 2>&1 | awk '{ print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }'
          register: docker_install    

        - name: Copy entire folder from host to remote node
          copy:
            src: /project/mhemmings/notebooks/nyu-testing/pg-bench-3-tests/lind
            dest: /tmp/
            
        - name: Install libraries
          shell: bash /tmp/lind/install_libraries.sh

        - name: Create output directory if it does not exist
          file:
            path: /home/mhemmings/output
            state: directory

        - name: Set ownership of /home/mhemmings/output
          file:
            path: /home/mhemmings/output
            owner: 1000
            group: 1000

        - name: Set permissions of /home/mhemmings/output to 755
          file:
            path: /home/mhemmings/output
            mode: '0755'
      
      when: run_initial_setup  # This will execute the block only if run_initial_setup is true

    - name: Run full workflow
      block:
        - name: Generate unique timestamp for this iteration
          command: date +%Y%m%d%H%M%S
          register: unique_timestamp
          delegate_to: localhost

        - name: Remove all contents from /home/mhemmings/output
          shell: rm -rf /home/mhemmings/output/*
          args:
            warn: false

        - name: Build and start docker containers
          shell: bash -c "docker-compose -f /tmp/lind/docker-compose.yaml --project-directory /tmp/lind up  --build"
          register: docker_build

        - name: Write docker build output to local file
          copy:
            content: "{{ docker_build.stdout }}\n{{ docker_build.stderr }}"
            dest: "/home/mhemmings/output/{{ ansible_hostname }}_{{ unique_timestamp.stdout }}_build.log"

        - name: Wait for 2.5 minutes
          shell: sleep 150
          async: 0
          poll: 0
        
        - name: Create tar.gz archive of wrk output files
          archive:
            path: "/home/mhemmings/output/*"
            dest: "/tmp/output_{{ ansible_hostname }}_{{ unique_timestamp.stdout }}.tar.gz"
            format: gz

        - name: Collect tarballs and organize by type of test
          fetch:
            src: "/tmp/output_{{ ansible_hostname }}_{{ unique_timestamp.stdout }}.tar.gz"
            dest: "/project/mhemmings/notebooks/lind-ipc-data/sphere-data/{{ unique_timestamp.stdout }}--pg-bench-lind--{{ ansible_hostname }}"

        - name: Untar the collected tarball on the host machine
          command: >
            tar -xzf /project/mhemmings/notebooks/lind-ipc-data/sphere-data/{{ unique_timestamp.stdout }}--pg-bench-lind--{{ ansible_hostname }}/{{ ansible_hostname }}/tmp/output_{{ ansible_hostname }}_{{ unique_timestamp.stdout }}.tar.gz -C /project/mhemmings/notebooks/lind-ipc-data/sphere-data/{{ unique_timestamp.stdout }}--pg-bench-lind--{{ ansible_hostname }}
          delegate_to: localhost

        - name: Bring down docker containers
          shell: bash -c "docker-compose -f /tmp/lind/docker-compose.yaml --project-directory /tmp/lind down -v"

        - name: Pause for 30 seconds before the next iteration
          pause:
            seconds: 30

      loop: "{{ range(1, 4) | list }}"  # Adjust the range to set the number of iterations
      loop_control:
        label: "Full workflow iteration {{ item }}"
