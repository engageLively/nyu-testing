#- import_playbook: wrk_install.yml

- hosts: b2,b3,b4,b5,b6,b7,b8,b9,b10
  strategy: free
  become: true
  #vars:
  #  success_count: 0
  #  failure_count: 0
  vars_files:
    - native_lind_bare_metal_fullstack_vars.yaml

  tasks:
    - debug:
        var: native_lind_bare_metal_fullstack_vars
        
    - name: Install libraries on remote node using libraries.sh
      script: libraries.sh

    - name: Remove all contents of /home/mhemmings/lind but keep the directory
      shell: |
        rm -rf /home/mhemmings/lind/*
        if [ ! -d /home/mhemmings/lind ]; then
          mkdir -p /home/mhemmings/lind
        fi
        
    - name: Ensure /home/mhemmings/lind/data directory exists
      file:
        path: /home/mhemmings/lind/data
        state: directory
        mode: '0755'
        
    - name: Copy native_lind_bare_metal_pgbench script file
      copy:
        src: "{{ native_lind_bare_metal_fullstack_vars.script_file_location }}"
        dest: "/home/mhemmings/lind/lind.tar.gz"
        
    - name: Untar the file
      unarchive:
        src: "/home/mhemmings/lind/lind.tar.gz"
        dest: "/home/mhemmings/lind/"
        remote_src: yes
    
    - name: Reboot the machine
      reboot:
        reboot_timeout: 300  # Timeout in seconds to wait for the machine to reboot
        test_command: whoami  # Command to check if the machine is back up
      register: reboot_status

    - name: Wait for the machine to be up
      wait_for:
        port: 22              # Wait for SSH port to be available
        delay: 5              # Delay before checking if the port is open
        timeout: 300          # Timeout for waiting for the port to be available
      when: reboot_status.changed  # Only wait if the reboot actually happened
      
    - name: Print current user
      debug:
        msg: "The current user is {{ ansible_facts['user_id'] }}"
        
    - name: Check for process running on port 8080
      shell: |
        lsof -t -i:8080
      register: processes
      ignore_errors: true

    - name: Terminate processes running on port 8080
      shell: |
        kill -9 {{ item }}
      with_items: "{{ processes.stdout_lines }}"
      when: processes.stdout_lines | length > 0
      register: kill_output
        
    - name: Execute script on remote node
      shell: "bash -c '{{ native_lind_bare_metal_fullstack_vars.execute_script_command }}'"
      register: script_output_a
      async: 30                # Adjust the time as necessary
      poll: 0                  # Do not wait for the command to finish
      ignore_errors: yes

    - name: Wait for server to be up
      uri:
        url: http:/localhost:8080/plaintext
        return_content: yes
        status_code: 200
      register: result
      retries: 10              # Number of retries
      delay: 5                 # Delay between retries in seconds
      until: result.status == 200
      ignore_errors: yes
      
    - name: Check if the server is up
      fail:
        msg: "Server is not up after 10 retries. Ending playbook execution."
      when: result.status != 200    

    #- name: Make HTTP request to localhost:8080/plaintext 10 times
    #  uri:
    #    url: http://localhost:8080/plaintext
    #    return_content: yes
    #  register: curl_response
    #  loop: "{{ range(1, 11) }}"  # Loop 10 times
    #  ignore_errors: yes

    #- name: Count successful requests
    #  set_fact:
    #    success_count: "{{ success_count | int + 1 }}"
    #  when: curl_response.results[item].status == 200
    #  loop: "{{ range(0, 10) }}"  # Loop over the results

    #- name: Count failed requests
    #  set_fact:
    #    failure_count: "{{ failure_count | int + 1 }}"
    #  when: curl_response.results[item].status != 200
    #  loop: "{{ range(0, 10) }}"  # Loop over the results

    #- name: Report the total number of successes and failures
    #  debug:
    #    msg: "Total Successes: {{ success_count }}, Total Failures: {{ failure_count }}"

    - name: Run wrk 
      command: >
        wrk -t1 -c1 -d10 --timeout 30 http://localhost:8080/mixed?power=1
      register: wrk_output

    - name: Show wrk output
      debug:
        var: wrk_output.stdout_lines

    - name: Show wrk errors
      debug:
        var: wrk_output.stderr_lines

    - name: Stop the playbook execution
      meta: end_play

    - name: Ensure wrk_lamp.sh is executable
      file:
        path: /home/mhemmings/lind/wrk_lamp.sh
        mode: '0755'

    - name: Execute wrk_lamp.sh script
      shell: "cd /home/mhemmings/lind && ./wrk_lamp.sh 1 10 lind"
      register: wrk_output
      ignore_errors: yes

    - name: Write output to /home/mhemmings/lind/data/wrk.log
      copy:
        content: "{{ wrk_output.stdout }}\n{{ wrk_output.stderr }}"
        dest: /home/mhemmings/lind/data/wrk.log
        mode: '0644'

    #- name: Copy files from /home/mhemmings/lind/data to /home/mhemmings/lind/data on the remote host
    #  shell: cp -r /home/mhemmings/lind/data/* /home/mhemmings/lind/data/
    #  ignore_errors: yes

    - name: Create tar.gz archive of the data directory for buffer_allocation
      archive:
        path: "{{ native_lind_bare_metal_fullstack_vars.output_file_location }}"
        dest: /home/mhemmings/lind/data.tar.gz
        format: gz

    - name: Collect tarballs and organize by type of test
      fetch:
        src: /home/mhemmings/lind/data.tar.gz
        dest: "/project/mhemmings/notebooks/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ 'native_lind_bare_metal_fullstack' }}--{{ ansible_hostname }}"

    - name: Untar the collected tarball on the host machine
      command: >
        tar -xzf /project/mhemmings/notebooks/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ 'native_lind_bare_metal_fullstack' }}--{{ ansible_hostname }}/{{ ansible_hostname}}/home/mhemmings/lind/data.tar.gz -C /project/mhemmings/notebooks/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ 'native_lind_bare_metal_fullstack' }}--{{ ansible_hostname }}/
      delegate_to: localhost

    #- name: Reboot the remote machine
    #  reboot:
    #    msg: "Rebooting the machine after tests"
