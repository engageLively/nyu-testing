- hosts: all
  strategy: free
  become: true
  vars_files:
    - buffer_allocation_vars.yaml
    - ipc_total_runtime_vars.yaml
    - sfi_penalty_vars.yaml
    - syscall_overhead_vars.yaml

  tasks:
    - debug:
        var: buffer_allocation_vars.script_file_location
    - debug:
        var: ipc_total_runtime_vars.script_file_location
    - debug:
        var: sfi_penalty_vars.script_file_location
    - debug:
        var: syscall_overhead_vars.script_file_location
      
    - name: Install libraries on remote node using libraries.sh
      script: libraries.sh

    - name: Remove all contents of /tmp/lind_project but keep the directory
      shell: |
        rm -rf /tmp/*
        if [ ! -d /tmp ]; then
          mkdir -p /tmp
        fi

    - name: Ensure /tmp/data directory exists
      file:
        path: /tmp/data
        state: directory
        mode: '0755'

    - name: Copy buffer_allocation script file
      copy:
        src: "{{ buffer_allocation_vars.script_file_location }}"
        dest: "/tmp/lind.tar.gz"
      when: inventory_hostname == 'a'

    - name: Copy ipc_total_runtime script file
      copy:
        src: "{{ ipc_total_runtime_vars.script_file_location }}"
        dest: "/tmp/lind.tar.gz"
      when: inventory_hostname == 'b'

    - name: Copy sfi_penalty script file
      copy:
        src: "{{ sfi_penalty_vars.script_file_location }}"
        dest: "/tmp/lind.tar.gz"
      when: inventory_hostname == 'c'

    - name: Copy syscall_overhead script file
      copy:
        src: "{{ syscall_overhead_vars.script_file_location }}"
        dest: "/tmp/lind.tar.gz"
      when: inventory_hostname == 'd'

    - name: Untar the file
      unarchive:
        src: "/tmp/lind.tar.gz"
        dest: "/tmp/"
        remote_src: yes

    - name: Execute buffer_allocation script on remote node
      shell: "bash -c '{{ buffer_allocation_vars.execute_script_command }}'"
      when: inventory_hostname == 'a'
      register: script_output_a

    - name: Execute ipc_total_runtime script on remote node
      shell: "bash -c '{{ ipc_total_runtime_vars.execute_script_command }}'"
      when: inventory_hostname == 'b'
      register: script_output_b

    - name: Execute sfi_penalty script on remote node
      shell: "bash -c '{{ sfi_penalty_vars.execute_script_command }}'"
      when: inventory_hostname == 'c'
      register: script_output_c

    - name: Execute syscall_overhead script on remote node
      shell: "bash -c '{{ syscall_overhead_vars.execute_script_command }}'"
      when: inventory_hostname == 'd'
      register: script_output_d

    - name: Write buffer_allocation script output to run.log
      copy:
        content: "{{ script_output_a.stdout }}\n{{ script_output_a.stderr }}"
        dest: "{{ buffer_allocation_vars.output_file_location }}run.log"
      when: inventory_hostname == 'a'

    - name: Write ipc_total_runtime script output to run.log
      copy:
        content: "{{ script_output_b.stdout }}\n{{ script_output_b.stderr }}"
        dest: "{{ ipc_total_runtime_vars.output_file_location }}run.log"
      when: inventory_hostname == 'b'

    - name: Write sfi_penalty script output to run.log
      copy:
        content: "{{ script_output_c.stdout }}\n{{ script_output_c.stderr }}"
        dest: "{{ sfi_penalty_vars.output_file_location }}run.log"
      when: inventory_hostname == 'c'

    - name: Write syscall_overhead script output to run.log
      copy:
        content: "{{ script_output_d.stdout }}\n{{ script_output_d.stderr }}"
        dest: "{{ syscall_overhead_vars.output_file_location }}run.log"
      when: inventory_hostname == 'd'

    - name: Create tar.gz archive of the data directory for buffer_allocation
      archive:
        path: "{{ buffer_allocation_vars.output_file_location }}"
        dest: /tmp/lind_project/data.tar.gz
        format: gz
      when: inventory_hostname == 'a'

    - name: Create tar.gz archive of the data directory for ipc_total_runtime
      archive:
        path: "{{ ipc_total_runtime_vars.output_file_location }}"
        dest: /tmp/lind_project/data.tar.gz
        format: gz
      when: inventory_hostname == 'b'

    - name: Create tar.gz archive of the data directory for sfi_penalty
      archive:
        path: "{{ sfi_penalty_vars.output_file_location }}"
        dest: /tmp/lind_project/data.tar.gz
        format: gz
      when: inventory_hostname == 'c'

    - name: Create tar.gz archive of the data directory for syscall_overhead
      archive:
        path: "{{ syscall_overhead_vars.output_file_location }}"
        dest: /tmp/lind_project/data.tar.gz
        format: gz
      when: inventory_hostname == 'd'

    - name: Collect tarballs and organize by type of test
      fetch:
        src: /tmp/lind_project/data.tar.gz
        dest: "~/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ test_types[inventory_hostname] }}--{{ ansible_hostname }}"
      vars:
        test_types:
          a: "buffer_allocation"
          b: "ipc_total_runtime"
          c: "sfi_penalty"
          d: "syscall_overhead"
    
    - name: Untar the collected tarball on the host machine
      command: >
        tar -xzf /home/mhemmings/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ test_types[inventory_hostname] }}--{{ ansible_hostname }}/{{ ansible_hostname }}/tmp/lind_project/data.tar.gz -C /home/mhemmings/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ test_types[inventory_hostname] }}--{{ ansible_hostname }}/
      delegate_to: localhost
      vars:
        test_types:
          a: "buffer_allocation"
          b: "ipc_total_runtime"
          c: "sfi_penalty"
          d: "syscall_overhead"
    
    - name: Remove the specific results folder
      file:
        path: ~/lind-ipc-data/sphere-data/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}--{{ test_types[inventory_hostname] }}--{{ ansible_hostname }}/{{ ansible_hostname }}
        state: absent
      delegate_to: localhost
      vars:
        test_types:
          a: "buffer_allocation"
          b: "ipc_total_runtime"
          c: "sfi_penalty"
          d: "syscall_overhead"

